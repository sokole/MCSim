% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fn.make.landscape.R
\name{fn.make.landscape}
\alias{fn.make.landscape}
\title{Make a simulation landscape}
\usage{
fn.make.landscape(JM = 10000, m = 0.1)
fn.make.landscape(site.coords = c(1:10), m = 0.1, JM = 10000)
}
\arguments{
\item{site.info}{A data frame with site information}

\item{site.coords}{A data.frame of site coordinates. Can be 1, 2, or more dimensions}

\item{dist.mat}{Alternative to site.coords. Can be a distance matrix or a network map from the igraph package}

\item{JL}{Scalar or vector number of individuals at each site, overrides JM}

\item{JM}{Total number of individuals to include in a MCSim simulation.}

\item{m}{Immigration rate paramter, from Hubbells neutral model. Overrides I.rate.m2.}

\item{I.rate.m2}{Alternative to m, immigration rate in number of individuals / m2 / timestep. Default is 1.}

\item{area.m2}{Area of each site in m2. Default is 1.}

\item{Ef.specificity}{Vector of specificity values for environmental filters at each site. If 0 (default), site habitat value is modeled as a single point along an environmental gradient. If > 0, a site's habitat is modeled as a normal curve around a point on an environmental gradient.}

\item{Ef}{Vector of habitat scores for each site.}

\item{guess.site.coords}{Binary. If TRUE, Uses PCoA to extract site coordinates if given a distance matrix or network map. Useful to make a map to display sites. Not necessary if igraph input is used because igraph has a function to plot a network map. Default is FALSE.}

\item{list.of.stuff}{A list that can be used to store other landscape attributes in the landscape object. Useful for storing igraph properties when igraph is used.}
}
\description{
Define the attributes of a MCSim landscape, including number of sites, area, carrying capacity, and local immigration rates.
}
\details{
There are two steps to creating a metacommunity simulation in MCSim:
1. Make a "landscape" -- The landscape is the “game board” on which the simulation plays out, and it is created using the fn.make.landscape function.
2. Run the simulation -- Once the landscape is created, you can pass the landscape object to fn.metaSIM along with parameter settings that define the rules for how metacommunity dynamics will play out in the metacommunity simulation. Note that the current version of MCSim is zero sum, which means there will always be JM individuals in the simulation during each generation.
For a tutorial, see \url{http://rpubs.com/sokole/159425}
}
